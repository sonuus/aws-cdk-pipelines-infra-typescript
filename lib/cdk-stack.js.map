{"version":3,"file":"cdk-stack.js","sourceRoot":"","sources":["cdk-stack.ts"],"names":[],"mappings":";;;AAAA,qCAAoC;AAoBpC,MAAM,kBAAkB,GAAG,KAAK,CAAA;AAEhC,MAAa,QAAS,SAAQ,GAAG,CAAC,KAAK;IACnC,YAAY,KAAoB,EAAE,EAAU,EAAE,KAAsB;QAChE,KAAK,CAAC,KAAK,EAAE,EAAE,EAAE,KAAK,CAAC,CAAA;QAEvB,qEAAqE;QACrE,sCAAsC;QACtC,oDAAoD;QAEpD,+EAA+E;QAC/E,+DAA+D;QAC/D,YAAY;QACZ,6EAA6E;QAC7E,QAAQ;QACR,oBAAoB;QACpB,4GAA4G;QAC5G,oGAAoG;QACpG,SAAS;QACT,IAAI;QAEJ,gDAAgD;QAChD,qCAAqC;QACrC,6BAA6B;QAC7B,uCAAuC;QACvC,IAAI;QAEJ,kFAAkF;QAClF,oDAAoD;QACpD,KAAK;QAEL,sFAAsF;QACtF,0DAA0D;QAC1D,KAAK;QAEL,sFAAsF;QACtF,wDAAwD;QACxD,uDAAuD;QACvD,KAAK;QAEL,sFAAsF;QACtF,uDAAuD;QACvD,uDAAuD;QACvD,KAAK;QAEL,sFAAsF;QACtF,uDAAuD;QACvD,uDAAuD;QACvD,KAAK;QACL,sFAAsF;QACtF,mEAAmE;QACnE,uDAAuD;QACvD,KAAK;QACL,sFAAsF;QACtF,kEAAkE;QAClE,uDAAuD;QACvD,KAAK;QAEL,4FAA4F;QAC5F,6CAA6C;QAC7C,yCAAyC;QACzC,KAAK;IACT,CAAC;CACJ;AA7DD,4BA6DC","sourcesContent":["import * as cdk from '@aws-cdk/core'\nimport * as ec2 from '@aws-cdk/aws-ec2'\n\nimport {\n    AVAILABILITY_ZONE_1,\n    AVAILABILITY_ZONE_2,\n    AVAILABILITY_ZONE_3,\n    ROUTE_TABLE_1,\n    ROUTE_TABLE_2,\n    ROUTE_TABLE_3,\n    SHARED_SECURITY_GROUP_ID,\n    SUBNET_ID_1,\n    SUBNET_ID_2,\n    SUBNET_ID_3,\n    VPC_CIDR,\n    VPC_ID,\n    get_environment_configuration,\n    get_logical_id_prefix,\n} from './configuration'\n\nconst target_environment = 'DEV'\n\nexport class CdkStack extends cdk.Stack {\n    constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {\n        super(scope, id, props)\n\n        // const mappings = get_environment_configuration(target_environment)\n        // const vpc_cidr = mappings[VPC_CIDR]\n        // const logical_id_prefix = get_logical_id_prefix()\n\n        // const vpc = new ec2.Vpc(this, `${logical_id_prefix}vpc`, { cidr: vpc_cidr })\n        // const shared_security_group_ingress = new ec2.SecurityGroup(\n        //     this,\n        //     `${target_environment}${logical_id_prefix}SharedIngressSecurityGroup`,\n        //     {\n        //         vpc: vpc,\n        //         description: 'Shared Security Group for Data Lake resources with self-referencing ingress rule.',\n        //         securityGroupName: `${target_environment}${logical_id_prefix}SharedIngressSecurityGroup`,\n        //     },\n        // )\n\n        // shared_security_group_ingress.addIngressRule(\n        //     shared_security_group_ingress,\n        //     ec2.Port.allTraffic(),\n        //     `Self-referencing ingress rule`,\n        // )\n\n        // vpc.addGatewayEndpoint(`${target_environment}${logical_id_prefix}S3Endpoint`, {\n        //     service: ec2.GatewayVpcEndpointAwsService.S3,\n        // })\n\n        // vpc.addGatewayEndpoint(`${target_environment}${logical_id_prefix}DynamoEndpoint`, {\n        //     service: ec2.GatewayVpcEndpointAwsService.DYNAMODB,\n        // })\n\n        // vpc.addInterfaceEndpoint(`${target_environment}${logical_id_prefix}GlueEndpoint`, {\n        //     service: ec2.InterfaceVpcEndpointAwsService.GLUE,\n        //     securityGroups: [shared_security_group_ingress],\n        // })\n\n        // vpc.addInterfaceEndpoint(`${target_environment}${logical_id_prefix}GlueEndpoint`, {\n        //     service: ec2.InterfaceVpcEndpointAwsService.KMS,\n        //     securityGroups: [shared_security_group_ingress],\n        // })\n\n        // vpc.addInterfaceEndpoint(`${target_environment}${logical_id_prefix}GlueEndpoint`, {\n        //     service: ec2.InterfaceVpcEndpointAwsService.SSM,\n        //     securityGroups: [shared_security_group_ingress],\n        // })\n        // vpc.addInterfaceEndpoint(`${target_environment}${logical_id_prefix}GlueEndpoint`, {\n        //     service: ec2.InterfaceVpcEndpointAwsService.SECRETS_MANAGER,\n        //     securityGroups: [shared_security_group_ingress],\n        // })\n        // vpc.addInterfaceEndpoint(`${target_environment}${logical_id_prefix}GlueEndpoint`, {\n        //     service: ec2.InterfaceVpcEndpointAwsService.STEP_FUNCTIONS,\n        //     securityGroups: [shared_security_group_ingress],\n        // })\n\n        // new cdk.CfnOutput(this, `${target_environment}${logical_id_prefix}VpcPrivateSubnet1')`, {\n        //     value: vpc.privateSubnets[0].subnetId,\n        //     exportName: mappings[SUBNET_ID_1],\n        // })\n    }\n}\n"]}